local lush = require('lush')
local base = require("wmbat-dark.base")
local loader = require("wmbat-dark.utils.loader")
local config_module = require("wmbat-dark.config")

---comment
---@param user_config { langs: { }, plugins: { } }
local function setup(user_config)
    if user_config then
        config_module.apply_config(user_config)
    end

    local load_plugins = loader.load_plugins(config_module.config)
    local load_langs = loader.load_langs(config_module.config)
    return lush.merge({ base, load_plugins, load_langs })
end

return {setup = setup}
-- 
-- 
-- local colours = require("wmbat-dark.colours")
-- local styles = require("wmbat-dark.settings").styles
-- local table_concat = table.concat
-- local hsl = lush.hsl
-- 
-- local fg = colours.white
-- 
-- local bg_0 = colours.black_0
-- local bg_1 = colours.black_1
-- local bg_2 = colours.black_2
-- local bg_3 = colours.black_3
-- local bg_4 = colours.black_4
-- 
-- local red = colours.red
-- local dark_red = colours.dark_red
-- local green = colours.green
-- local blue = colours.blue
-- local dark_blue = colours.dark_blue
-- local yellow = colours.yellow
-- local dark_yellow = colours.dark_yellow
-- local cyan = colours.cyan
-- local purple = colours.purple
-- local dark_purple = colours.dark_purple
-- local orange = colours.orange
-- local pink = colours.pink
-- 
-- local grey_0 = colours.grey_0
-- local grey_1 = colours.grey_1
-- local grey_2 = colours.grey_2
-- 
-- -- LSP/Linters mistakenly show `undefined global` errors in the spec, they may
-- -- support an annotation like the following. Consult your server documentation.
-- -- @diagnostic disable: undefined-global
-- local theme = lush(function(injected_functions)
--     local sym = injected_functions.sym
--     return {
--         -- These groups are for the native LSP client and diagnostic system. Some
--         -- other LSP clients may use these groups, or use their own. Consult your
--         -- LSP client's documentation.
-- 
--         -- See :h lsp-highlight, some groups may not be listed, submit a PR fix to lush-template!
--         --
--         LspReferenceText { gui = styles.bold },  -- Used for highlighting "text" references
--         LspReferenceRead { gui = styles.bold },  -- Used for highlighting "read" references
--         LspReferenceWrite { gui = styles.bold }, -- Used for highlighting "write" references
--         -- LspCodeLens                 { } , -- Used to color the virtual text of the codelens. See |nvim_buf_set_extmark()|.
--         -- LspCodeLensSeparator        { } , -- Used to color the seperator between two or more code lens.
--         LspSignatureActiveParameter { fg = bg_0, bg = red, gui = styles.bold }, -- Used to highlight the active parameter in the signature help. See |vim.lsp.handlers.signature_help()|.
-- 
--         TextError { fg = colours.red },
--         TextWarning { fg = colours.orange },
--         TextInformation { fg = colours.blue },
--         TextHint { fg = colours.green },
-- 
--         UnderlineError { fg = colours.red, gui = styles.undercurl },
--         UnderlineWarning { fg = colours.orange, gui = styles.undercurl },
--         UnderlineInformation { fg = colours.blue, gui = styles.undercurl },
--         UnderlineHint { fg = colours.blue, gui = styles.undercurl },
-- 
--         -- See :h diagnostic-highlights, some groups may not be listed, submit a PR fix to lush-template!
--         --
--         DiagnosticError { TextError },                    -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
--         DiagnosticWarn { TextWarning },                   -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
--         DiagnosticInfo { TextInformation },               -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
--         DiagnosticHint { TextHint },                      -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
--         DiagnosticVirtualTextError { TextError },         -- Used for "Error" diagnostic virtual text.
--         DiagnosticVirtualTextWarn { TextWarning },        -- Used for "Warn" diagnostic virtual text.
--         DiagnosticVirtualTextInfo { TextInformation },    -- Used for "Info" diagnostic virtual text.
--         DiagnosticVirtualTextHint { TextHint },           -- Used for "Hint" diagnostic virtual text.
--         DiagnosticUnderlineError { UnderlineError },      -- Used to underline "Error" diagnostics.
--         DiagnosticUnderlineWarn { UnderlineWarning },     -- Used to underline "Warn" diagnostics.
--         DiagnosticUnderlineInfo { UnderlineInformation }, -- Used to underline "Info" diagnostics.
--         DiagnosticUnderlineHint { UnderlineHint },        -- Used to underline "Hint" diagnostics.
--         DiagnosticFloatingError { TextError },            -- Used to color "Error" diagnostic messages in diagnostics float. See |vim.diagnostic.open_float()|
--         DiagnosticFloatingWarn { TextWarning },           -- Used to color "Warn" diagnostic messages in diagnostics float.
--         DiagnosticFloatingInfo { TextInformation },       -- Used to color "Info" diagnostic messages in diagnostics float.
--         DiagnosticFloatingHint { TextHint },              -- Used to color "Hint" diagnostic messages in diagnostics float.
--         DiagnosticSignError { TextError },                -- Used for "Error" signs in sign column.
--         DiagnosticSignWarn { TextWarning },               -- Used for "Warn" signs in sign column.
--         DiagnosticSignInfo { TextInformation },           -- Used for "Info" signs in sign column.
--         DiagnosticSignHint { TextHint },                  -- Used for "Hint" signs in sign column.
-- 
-- 
--         sym "@lsp.type.namespace" { fg = red },
--         sym "@lsp.type.type" { fg = yellow },
--         sym "@lsp.type.class" { fg = yellow },
--         sym "@lsp.type.enum" { fg = yellow },
--         sym "@lsp.type.struct" { fg = yellow },
--         sym "@lsp.type.typeParameter" { fg = yellow },
--         sym "@lsp.type.parameter" { fg = grey_2 },
--         sym "@lsp.type.variable" { fg = fg },
--         sym "@lsp.type.property" { fg = cyan },
--         sym "@lsp.type.enumMember" { fg = cyan },
--         -- sym"@lsp.type.event" { fg = yellow },
-- 
--         sym "@lsp.type.function" { fg = blue },
--         sym "@lsp.type.method" { fg = blue },
--         sym "@lsp.type.macro" { fg = pink },
--         sym "@lsp.type.keyword" { fg = purple },
--         sym "@lsp.type.modifier" { fg = purple },
--         sym "@lsp.type.comment" { fg = grey_0 },
--         sym "@lsp.type.string" { fg = green },
--         sym "@lsp.type.number" { fg = yellow },
--         sym "@lsp.type.regexp" { fg = yellow },
--         sym "@lsp.type.operator" { fg = purple },
-- 
--         sym "@lsp.mod.deprecated" { fg = grey_2, gui = "strikethrough" },
-- 
--         -- Tree-Sitter syntax groups.
--         --
--         -- See :h treesitter-highlight-groups, some groups may not be listed,
--         -- submit a PR fix to lush-template!
--         --
--         -- Tree-Sitter groups are defined with an "@" symbol, which must be
--         -- specially handled to be valid lua code, we do this via the special
--         -- sym function. The following are all valid ways to call the sym function,
--         -- for more details see https://www.lua.org/pil/5.html
--         --
--         -- sym("@text.literal")
--         -- sym('@text.literal')
--         -- sym"@text.literal"
--         -- sym'@text.literal'
--         --
--         -- For more information see https://github.com/rktjmp/lush.nvim/issues/109
-- 
--         -- sym"@text.literal"      { }, -- Comment
--         -- sym"@text.reference"    { }, -- Identifier
--         -- sym"@text.title"        { }, -- Title
--         -- sym"@text.uri"          { }, -- Underlined
--         -- sym"@text.underline"    { }, -- Underlined
--         -- sym"@text.todo"         { }, -- Todo
--         --
--         sym "@comment" { fg = grey_0 },                              -- Comment
--         sym "@punctuation" { fg = grey_0 },                          -- Delimiter
--         sym "@punctuation.special" { fg = yellow },                  -- Delimiter
-- 
--         sym "@constant" { fg = orange, gui = styles.italic },        -- Constant
--         sym "@constant.builtin" { fg = cyan, gui = styles.italic },  -- Special
--         sym "@constant.macro" { fg = cyan, gui = styles.italic },    -- Define
--         sym "@define" { fg = purple },                               -- Define
--         sym "@macro" { fg = cyan },                                  -- Macro
--         sym "@string" { fg = green },                                -- String
--         sym "@string.escape" { fg = yellow },                        -- SpecialChar
--         sym "@string.regex" { fg = yellow },                         -- SpecialChar
--         sym "@string.special" { fg = yellow },                       -- SpecialChar
--         sym "@character" { fg = green },                             -- Character
--         sym "@character.special" { fg = yellow },                    -- SpecialChar
--         sym "@number" { fg = yellow },                               -- Number
--         sym "@boolean" { fg = yellow },                              -- Boolean
--         sym "@float" { fg = yellow },                                -- Float
-- 
--         sym "@function" { fg = blue },                               -- Function
--         sym "@function.builtin" { fg = blue },                       -- Special
--         sym "@function.macro" { fg = blue },                         -- Macro
--         sym "@parameter" { fg = grey_2, gui = styles.italic },       -- Identifier
--         sym "@method" { fg = blue },                                 -- Function
--         sym "@field" { fg = blue },                                  -- Identifier
--         sym "@property" { fg = red, gui = styles.italic },           -- Identifier
--         sym "@constructor" { fg = blue },                            -- Special
-- 
--         sym "@conditional" { fg = purple },                          -- Conditional
--         sym "@repeat" { fg = purple },                               -- Repeat
--         sym "@label" { fg = purple },                                -- Label
--         sym "@operator" { fg = purple },                             -- Operator
--         sym "@keyword" { fg = purple },                              -- Keyword
--         sym "@exception" { fg = purple },                            -- Exception
-- 
--         sym "@variable" { fg = fg },                                 -- Identifier
--         sym "@type" { fg = yellow },                                 -- Type
--         sym "@type.definition" { fg = yellow },                      -- Typedef
--         -- sym"@storageclass"     { }, -- StorageClass
--         sym "@structure" { fg = colours.cyan, gui = styles.italic }, -- Structure
--         sym "@namespace" { fg = red },                               -- Identifier
--         sym "@include" { fg = purple },                              -- Include
--         sym "@preproc" { fg = purple },                              -- PreProc
--         -- sym"@debug"            { }, -- Debug
--         sym "@tag" { fg = red, guy = styles.italic },                -- Tag
-- 
--         -- nvim-tree
--         --
-- 
--         -- Telescope
--         --
--         TelescopeMatching { fg = colours.green, gui = styles.bold },
--         TelescopeBorder { fg = colours.blue },
--         TelescopePromptPrefix { fg = colours.purple },
--         TelescopeSelection { bg = colours.dark_green },
-- 
--         -- Vim Startify
--         --
--         StartifyBracket { fg = colours.Grey },
--         StartifyFile { fg = colours.Fg },
--         StartifyNumber { fg = colours.Red },
--         StartifyPath { fg = colours.Green },
--         StartifySlash { fg = colours.Green },
--         StartifySection { fg = colours.Blue },
--         StartifyHeader { fg = colours.Purple },
--         StartifySpecial { fg = colours.Grey },
-- 
--         -- nvim-ts-rainbow
--         --
--         rainbowcol1 { fg = colours.red },
--         rainbowcol2 { fg = colours.yellow },
--         rainbowcol3 { fg = colours.green },
--         rainbowcol4 { fg = colours.cyan },
--         rainbowcol5 { fg = colours.blue },
--         rainbowcol6 { fg = colours.purple },
--         rainbowcol7 { fg = colours.orange },
-- 
--         AerialFunctionIcon { fg = colours.purple },
--         AerialLine { fg = colours.red, bg = bg_2 },
--         AerialLineNC { fg = colours.red, bg = bg_2 },
-- 
--         -- C++
--         --
--         cOperator { wmbat_dark_purple },
--         cppOperator { wmbat_dark_purple },
-- 
--         -- render-markdown
--         RenderMarkdownH1Bg { bg = colours.dark_purple },
--         RenderMarkdownH2Bg { bg = colours.dark_blue },
--         RenderMarkdownH3Bg { bg = colours.dark_green },
--         RenderMarkdownH4Bg { bg = colours.dark_red },
--         RenderMarkdownH5Bg { bg = colours.dark_orange },
--         RenderMarkdownH6Bg { bg = colours.dark_yellow },
--         RenderMarkdownCode { bg = colours.black_1 },
--         RenderMarkdownCodeInline { bg = colours.black_1 },
--     }
-- end)
-- 
-- -- Return our parsed theme for extension or use elsewhere.
-- return theme
-- 
-- -- vi:nowrap
